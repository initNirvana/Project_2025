services:
  community-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: communitydb
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "3307:3306"  # 로컬 머신의 외부 포트를 3307로 변경 (필요 시)
    volumes:
      - community-db-data:/var/lib/mysql
    networks:
      - community-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
      start_period: 20s

  community-api:
    build: .
    ports:
      - "8081:8081"
    depends_on:
      - community-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://community-db:3306/communitydb
      SPRING_JPA_HIBERNATE_DDL_AUTO: update  # Hibernate 설정 (필요 시 변경)
      SPRING_FLYWAY_ENABLED: true           # Flyway 활성화
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: rootpassword
    networks:
      - community-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - community-network
    hostname: prometheus    # 호스트 이름 명시적 지정
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources    # 경로
    depends_on:
      - prometheus
    networks:
      - community-network
    restart: always

  elasticsearch:
    build:
      context: "./elasticsearch/"
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: "./elasticsearch/config/elasticsearch.yml"
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - "./elasticsearch/data:/var/lib/elasticsearch/data"
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: elastic
      discovery.type: single-node
      xpack.security.enabled: false
    networks:
      - elk

  logstash:
    build:
      context: "./logstash/"
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: "./logstash/config/logstash.yml"
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: "./logstash/pipeline"
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5001:5001/tcp"
      - "5001:5001/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: "./kibana/"
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: "./kibana/config/kibana.yml"
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

networks:
  community-network:
    driver: bridge
  elk:
    driver: bridge

volumes:
  community-db-data:
  prometheus_data:
  grafana_data:
